{
    "$schema": "settings.schema.json",

    "+ui": {
        "theme": "app://themes/green.json",
    },

    "+platform": {
        "terminal-sleep-threshold": 5
    },

    "keybindings": {
        "preset": "vim"
    },

    "wasm-plugin-post-load-commands": [
        "load-configured-keybindings"
    ],

    "wasm-plugin-post-reload-commands": [
        "load-configured-keybindings"
    ],

    "+language-mappings": {
        "\\..(agda|lagda)$": "agda",
        "\\..(c|cc|h|inc)$": "c",
        "\\..sh$": "bash",
        "\\..cs$": "c_sharp",
        "\\..(cpp|tcc|hpp)$": "cpp",
        "\\..css$": "css",
        "\\..go$": "go",
        "\\..hs$": "haskell",
        "\\..(html|htmx)$": "html",
        "\\..java$": "java",
        "\\..(js|jsx)$": "javascript",
        "\\..json$": "json",
        "\\..nev-session$": "json",
        "\\..lock$": "json",
        "\\..code-workspace$": "json",
        "\\..yml$": "yaml",
        "\\..clangd$": "yaml",
        "\\..nix$": "nix",
        "\\..wit$": "wit",
        "\\..ocaml$": "ocaml",
        "\\..php$": "php",
        "\\..(py|pyi)$": "python",
        "\\..ruby$": "ruby",
        "\\..rs$": "rust",
        "\\..scala$": "scala",
        "\\..(ts|tsx)$": "typescript",
        "\\..(nim|nims|nimble)$": "nim",
        "\\..zig$": "zig",
        "\\..odin$": "odin",
        "\\..md$": "markdown",
        "\\..scm$": "query",
        "\\..toml$": "toml",
        "\\..ps1$": "powershell",
        "\\..wat$": "elisp",
        "\\..talon$": "talon",
        "\\..lua$": "lua",
        "\\..log$": "log",
        "\\..shell-command-results$": "shell-command-results",
        "\\..terminal-output$": "terminal-output",
        "nimble..*?\\..paths$": "nim-paths",
        "/(vector|string|thread|iostream)$": "cpp",
        "..+/MSVC/..+/include(/..+?)*/[a-z0-9_]+$": "cpp",
        "..+/include/c\\+\\+(/..+?)+/[a-z0-9_]+$": "cpp"
    },

    "+debugger": {
        "+type": {
            "lldb-dap": {
                "connection": "stdio",
                "path": "lldb-dap",
                "args": []
            },
            "lldb-dap-tcp-launch": {
                "connection": "tcp",
                "path": "lldb-dap"
            },
            "lldb": {
                "connection": "tcp",
                "port": 0,
                "path": "lldb-dap"
            }
        }
    },

    "+lsp": {
        "clangd": {
            "languages": ["c", "cpp"],
            "command": ["clangd", "--offset-encoding=utf-8"],
        },

        "zls": {
            "languages": ["zig"],
            "command": ["zls"],
            "settings": {
                "zls": {
                    "enable_snippets": true,
                    "enable_argument_placeholders": true,
                    "enable_build_on_save": false,
                    "build_on_save_step": "install",
                    "enable_autofix": false,
                    "semantic_tokens": "none",
                    "enable_inlay_hints": true,
                    "inlay_hints_show_variable_type_hints": true,
                    "inlay_hints_show_struct_literal_field_type": true,
                    "inlay_hints_show_parameter_name": true,
                    "inlay_hints_show_builtin": true,
                    "inlay_hints_exclude_single_argument": true,
                    "inlay_hints_hide_redundant_param_names": true,
                    "inlay_hints_hide_redundant_param_names_last_token": true,
                    "warn_style": true,
                    "highlight_global_var_declarations": true,
                    "dangerous_comptime_experiments_do_not_enable": null,
                    "skip_std_references": true,
                    "prefer_ast_check_as_child_process": true,
                    "completion_label_details": true
                }
            }
        },

        "ols": {
            "languages": ["odin"],
            "command": ["ols"],
        },

        "rust-analyzer": {
            "languages": ["rust"],
            "command": ["rust-analyzer"],
            "initialization-options-name": "rust-analyzer",
            "initial-configuration": "",
            "workspace-configuration-name": "",
            "rust-analyzer": {}
        },

        "OmniSharp": {
            "languages": ["c_sharp"],
            "command": ["OmniSharp"],
        },

        "typescript-language-server": {
            "languages": ["typescript", "javascript"],
            "command": ["typescript-language-server"],
        },

        "vscode-json-languageserver": {
            "languages": ["json"],
            "command": ["vscode-json-languageserver"],
        },

        "pylspython": {
            "languages": ["python"],
            "command": ["pylsp"],
        },

        "nimlangserver": {
            "languages": ["nim"],
            "command": ["nimlangserver", "--stdio"],
            "settings": {}
        },

        "harper-ls": {
            "languages": ["markdown"],
            "command": ["harper-ls", "--stdio"],
            "settings": {
                "harper-ls": {
                },
            },
        },

        "lua-language-server": {
            "languages": ["lua"],
            "command": ["lua-language-server"],
        },

        "paths": {
            "languages": ["markdown", "command-line"],
            "priority": -1,
        },

        "regex": {
            "languages": [],
            "priority": -2,
        },

        "command-line.languages": ["command-line"],
    },

    "lsp-merge.timeout": 10000,

    "+lang": {
        "command-line": {
            "editor.save-in-session": false,
            "+text": {
                "completion-word-chars": [["a", "z"], ["A", "Z"], ["0", "9"], "_", "-"]
            }
        },
        "terminal-output": {
            "editor.save-in-session": false,
        },
        "html": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-html",
                "tab-width": 2,
                "indent": "spaces",
                "indent-after": [
                    ">"
                ]
            }
        },
        "query": {
            "+text": {
                "treesitter.repository": "tree-sitter-grammars/tree-sitter-query",
                "tab-width": 2,
                "indent": "spaces",
                "indent-after": [
                    "(",
                    "{",
                    "["
                ],
                "line-comment": ";"
            }
        },
        "nim": {
            "+text": {
                "color-highlight": {
                    "enable": false,
                    "regex": "color\\((\\d+(\\.\\d+)?(,\\s*))(\\d+(\\.\\d+)?(,\\s*))(\\d+(\\.\\d+)?)\\)",
                    "kind": "float1"
                },
                "treesitter.repository": "alaviss/tree-sitter-nim",
                "formatter.command": ["nph"],
                "tab-width": 2,
                "indent": "spaces",
                "indent-after": [
                    ":",
                    "=",
                    "(",
                    "{",
                    "[",
                    "enum",
                    "object"
                ],
                "line-comment": "#",
                "+search-regexes": {
                    "goto-definition": "((proc|method|func|template|macro|iterator|type|declare|declareSettings|^var|^let) [[0]]\\b)|(\\b[[0]]\\b.*?= (object|ref|ptr|array|set|tuple|enum|distinct|proc))|((type |  +)\\b[[0]]\\b\\*?( \\{.*?)?:.+[^,;]$)",
                    "goto-implementation": "object of [[0]]",
                    "symbols": "((proc|method|func|template|macro|iterator|type|declare|declareSettings) (\\b([a-zA-Z0-9_]+\\b)|(`.+?`)))|((\\b([a-zA-Z0-9_]+)|(`.+?`)\\b).*?= (object|ref|ptr|array|set|tuple|enum|distinct|proc))",
                    "workspace-symbols-by-kind": {
                        "Class": "(\\b([a-zA-Z0-9_]+)|(`.+?`)\\b).*?= (object|ref|ptr|array|set|tuple|distinct)",
                        "Function": "((proc|func|template|macro|iterator|type|declare|declareSettings) (\\b([a-zA-Z0-9_]+\\b)|(`.+?`)))|((\\b([a-zA-Z0-9_]+)|(`.+?`)\\b).*?= (proc))",
                        "Method": "((method) (\\b([a-zA-Z0-9_]+\\b)|(`.+?`)))",
                        "Enum": "(\\b([a-zA-Z0-9_]+)|(`.+?`)\\b).*?= (enum)"
                    }
                }
            }
        },
        "nim-paths": {
            "+text": {
                "treesitter.repository": "alaviss/tree-sitter-nim",
                "treesitter.language": "nim",
                "formatter": "nph",
                "tab-width": 2,
                "indent": "spaces",
                "indent-after": [
                    ":",
                    "=",
                    "(",
                    "{",
                    "[",
                    "enum",
                    "object"
                ],
                "line-comment": "#"
            }
        },
        "python": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-python",
                "tab-width": 2,
                "indent": "spaces",
                "indent-after": [
                    ":",
                    "=",
                    "(",
                    "{",
                    "["
                ],
                "line-comment": "#"
            }
        },
        "javascript": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-javascript",
                "tab-width": 4,
                "indent": "spaces",
                "indent-after": [
                    ":",
                    "=",
                    "(",
                    "{",
                    "["
                ],
                "line-comment": "//",
                "block-comment": [
                    "/*",
                    "*/"
                ],
                "ignoreContextLinePrefix": "{"
            }
        },
        "typescript": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-typescript/typescript",
                "tab-width": 4,
                "indent": "tabs",
                "indent-after": [
                    ":",
                    "=",
                    "(",
                    "{",
                    "["
                ],
                "line-comment": "//",
                "block-comment": [
                    "/*",
                    "*/"
                ]
            }
        },
        "tsx": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-typescript/tsx",
                "tab-width": 4,
                "indent": "tabs",
                "indent-after": [
                    ":",
                    "=",
                    "(",
                    "{",
                    "["
                ],
                "line-comment": "//",
                "block-comment": [
                    "/*",
                    "*/"
                ]
            }
        },
        "rust": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-rust",
                "tab-width": 4,
                "indent": "spaces",
                "indent-after": [
                    ":",
                    "=",
                    "(",
                    "{",
                    "["
                ],
                "ignoreContextLineRegex": "\\W*(where|\\{|\\)).*",
                "line-comment": "//",
                "block-comment": [
                    "/*",
                    "*/"
                ]
            }
        },
        "c": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-c",
                "tab-width": 4,
                "indent": "spaces",
                "indent-after": [
                    ":",
                    "=",
                    "(",
                    "{",
                    "["
                ],
                "line-comment": "//",
                "block-comment": [
                    "/*",
                    "*/"
                ],
                "+search-regexes": {
                    "goto-definition": [
                        "^\\s*(\\w+[\\*\\s]+)[[0]]\\s*\\([^()]*\\)\\s*(const)?\\s*(\\{)?$",
                        "^\\s*(typedef\\s+)?(struct|enum|union)\\s+[[0]]"
                     ],
                    "symbols": [
                        "^\\s*(\\w+[\\*\\s]+)\\w+\\s*\\([^()]*\\)\\s*(const)?\\s*(\\{)?$",
                        "^\\s*(typedef\\s+)?(struct|enum|union)\\s+\\w+"
                    ],
                    "workspace-symbols-by-kind": {
                        "Function": "^\\s*(\\w+[\\*\\s]+)\\w+\\s*\\([^()]*\\)\\s*(const)?\\s*(\\{)?$",
                        "Class": "^\\s*(typedef\\s+)?(struct|enum|union)\\s+\\w+"
                    }
                }
            }
        },
        "cpp": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-cpp",
                "tab-width": 4,
                "indent": "spaces",
                "indent-after": [
                    ":",
                    "=",
                    "(",
                    "{",
                    "["
                ],
                "line-comment": "//",
                "block-comment": [
                    "/*",
                    "*/"
                ]
            }
        },
        "c_sharp": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-c-sharp",
                "tab-width": 4,
                "indent": "tabs",
                "indent-after": [
                    ":",
                    "=",
                    "(",
                    "{",
                    "["
                ],
                "line-comment": "//",
                "block-comment": [
                    "/*",
                    "*/"
                ]
            }
        },
        "java": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-java",
                "tab-width": 4,
                "indent": "tabs",
                "indent-after": [
                    ":",
                    "=",
                    "(",
                    "{",
                    "["
                ],
                "line-comment": "//",
                "block-comment": [
                    "/*",
                    "*/"
                ]
            }
        },
        "zig": {
            "+text": {
                "treesitter.repository": "maxxnino/tree-sitter-zig",
                "tab-width": 4,
                "indent": "tabs",
                "indent-after": [
                    ":",
                    "=",
                    "(",
                    "{",
                    "["
                ],
                "line-comment": "//",
                "+search-regexes": {
                    "goto-definition": [
                        "fn \\b[[0]]\\b",
                        "\\b[[0]]\\b = (struct|enum|union|@import)"
                    ],
                    "symbols": [
                        "fn \\b[a-zA-Z0-9_]+\\b",
                        "\\b[a-zA-Z0-9_]+\\b = (struct|enum|union|@import)"
                    ],
                    "workspace-symbols-by-kind": {
                        "Class": "\\b[a-zA-Z0-9_]+\\b = (struct|enum|union|@import)",
                        "Function": "fn \\b[a-zA-Z0-9_]+\\b"
                    }
                }
            }
        },
        "odin": {
            "+text": {
                "treesitter.repository": "ap29600/tree-sitter-odin",
                "tab-width": 4,
                "indent": "tabs",
                "indent-after": [
                    ":",
                    "=",
                    "(",
                    "{",
                    "["
                ],
                "line-comment": "//",
                "block-comment": [
                    "/*",
                    "*/",
                ],
            },
        },
        "json": {
            "+text": {
                "treesitter.repository": "maxxnino/tree-sitter-json",
                "tab-width": 4,
                "indent": "tabs",
                "indent-after": [
                    ":",
                    "{",
                    "[",
                ],
                "line-comment": "//",
                "color-highlight": {
                    "enable": false,
                    "regex": "#([0-9a-fA-F]{6})|#([0-9a-fA-F]{8})",
                    "kind": "hex",
                },
            },
        },
        "yaml": {
            "+text": {
                "treesitter.repository": "tree-sitter-grammars/tree-sitter-yaml",
                "tab-width": 2,
                "indent": "spaces",
                "indent-after": [
                    ":",
                    "{",
                    "["
                ],
                "line-comment": "#"
            }
        },
        "markdown": {
            "+text": {
                "color-highlight": {
                    "enable": false,
                    "regex": "#([0-9a-fA-F]{6})",
                    "kind": "hex",
                },
                "context-lines": false,
                "treesitter.repository": "tree-sitter-grammars/tree-sitter-markdown/tree-sitter-markdown",
                "treesitter.queries": "tree-sitter-markdown/queries",
                "tab-width": 2,
                "indent": "spaces",
                "block-comment": [ "<!--", "-->" ]
            }
        },
        "markdown_inline": {
            "+text": {
                "treesitter.repository": "tree-sitter-grammars/tree-sitter-markdown/tree-sitter-markdown-inline",
                "treesitter.queries": "tree-sitter-markdown-inline/queries",
                "tab-width": 2,
                "indent": "spaces",
                "block-comment": [ "<!--", "-->" ]
            }
        },
        "scala": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-scala"
            }
        },
        "regex": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-regex"
            }
        },
        "ocaml-interface": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-ocaml/grammars/interface"
            }
        },
        "ocaml": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-ocaml/grammars/ocaml"
            }
        },
        "ocaml-type": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-ocaml/grammars/type"
            }
        },
        "php": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-php/php"
            }
        },
        "php-only": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-php/php_only"
            }
        },
        "ruby": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-ruby"
            }
        },
        "jsdoc": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-jsdoc"
            }
        },
        "go": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-go"
            }
        },
        "ql": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-ql"
            }
        },
        "bash": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-bash"
            }
        },
        "powershell": {
            "+text": {
                "treesitter.repository": "airbus-cert/tree-sitter-powershell",
                "tab-width": 4,
                "indent": "spaces",
                "line-comment": "#"
            }
        },
        "css": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-css"
            }
        },
        "haskell": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-haskell"
            }
        },
        "agda": {
            "+text": {
                "treesitter.repository": "tree-sitter/tree-sitter-agda"
            }
        },
        "toml": {
            "+text": {
                "treesitter.repository": "tree-sitter-grammars/tree-sitter-toml"
            }
        },
        "swift": {
            "+text": {
                "treesitter.repository": "alex-pinkus/tree-sitter-swift"
            }
        },
        "log": {
            "+text": {
                "treesitter.repository": "Tudyx/tree-sitter-log"
            }
        },
        "shell-command-results": {
            "editor.save-in-session": false,
            "+text": {
                "auto-reload": true,
                "scroll-to-change-on-reload": "last",
            },
        },
        "talon": {
            "+text": {
                "treesitter.repository": "wenkokke/tree-sitter-talon",
                "tab-width": 4,
                "indent": "spaces",
                "indent-after": [
                    ":",
                    "(",
                    "{",
                    "["
                ],
                "line-comment": "#"
            }
        },
        "nix": {
            "+text": {
                "treesitter.repository": "nix-community/tree-sitter-nix",
                "tab-width": 2,
                "indent": "spaces",
                "indent-after": [
                    ":",
                    "=",
                    "(",
                    "{",
                    "["
                ],
                "line-comment": "#"
            }
        },
        "commonlisp": {
            "+text": {
                "treesitter.repository": "tree-sitter-grammars/tree-sitter-commonlisp",
                "tab-width": 2,
                "indent": "spaces",
                "indent-after": [
                    "(",
                    "{",
                    "["
                ],
                "line-comment": ";",
                "block-comment": [
                    "(;",
                    ";)"
                ]
            }
        },
        "elisp": {
            "+text": {
                "treesitter.repository": "Wilfred/tree-sitter-elisp",
                "tab-width": 2,
                "indent": "spaces",
                "indent-after": [
                    "(",
                    "{",
                    "["
                ],
                "line-comment": ";"
            }
        },
        "lua": {
            "+text": {
                "treesitter.repository": "tjdevries/tree-sitter-lua",
                "tab-width": 4,
                "indent": "spaces",
                "indent-after": [
                    "(",
                    "{",
                    "["
                ],
                "line-comment": "--"
            }
        },
        "wit": {
            "+text": {
                "treesitter.repository": "liamwh/tree-sitter-wit",
                "tab-width": 2,
                "indent": "spaces",
                "indent-after": [
                    ":",
                    "=",
                    "(",
                    "{",
                    "["
                ],
                "line-comment": "//",
                "block-comment": [
                    "/*",
                    "*/"
                ]
            }
        },
    },

    "editor.shells.wsl": {
        "command": "wsl",
        "args": ["--"],
        "eval": false,
    },
    "editor.shells.powershell": {
        "command": "powershell",
        "args": ["-Command"],
        "eval": false,
    },
    "editor.shells.bash": {
        "command": "bash",
        "args": ["-c"],
        "eval": false,
    },
    "editor.shells.sh": {
        "command": "sh",
        "args": ["-c"],
        "eval": false,
    },
    "editor.shells.zsh": {
        "command": "zsh",
        "args": ["-c"],
        "eval": false,
    },

    "terminal.default-mode": "insert",

    "editor.open-session.tmux": {
        "env": "TMUX",
        "command": "tmux",
        "args": ["split-window", ["exe"] , ["args"], "--terminal"],
    },
    "editor.open-session.zellij": {
        "env": "ZELLIJ",
        "command": "zellij",
        "args": ["run", "--", ["exe"] , ["args"], "--terminal"],
    },
    "editor.open-session.wezterm": {
        "env": "WEZTERM_EXECUTABLE",
        "command": "wezterm",
        "args": ["cli", "split-pane", "--right", "--", ["exe"] , ["args"], "--terminal"],
    },

    "layout": {
        "kind": "main",
        "center": {
            "kind": "tab",
        },
     },
}